{"ast":null,"code":"import * as React from 'react';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport useOptionsGetters from './useOptionsGetters';\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\n\nexport default function SceneView(_ref) {\n  let {\n    screen,\n    route,\n    navigation,\n    routeState,\n    getState,\n    setState,\n    options,\n    clearOptions\n  } = _ref;\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const {\n    addOptionsGetter\n  } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation\n  });\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find(r => r.key === route.key);\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  const setCurrentState = React.useCallback(child => {\n    const state = getState();\n    setState({ ...state,\n      routes: state.routes.map(r => r.key === route.key ? { ...r,\n        state: child\n      } : r)\n    });\n  }, [getState, route.key, setState]);\n  const isInitialRef = React.useRef(true);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  }); // Clear options set by this screen when it is unmounted\n\n  React.useEffect(() => {\n    return clearOptions; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state: routeState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [routeState, getCurrentState, setCurrentState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const ScreenComponent = screen.getComponent ? screen.getComponent() : screen.component;\n  return /*#__PURE__*/React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EnsureSingleNavigator, null, /*#__PURE__*/React.createElement(StaticContainer, {\n    name: screen.name,\n    render: ScreenComponent || screen.children,\n    navigation: navigation,\n    route: route\n  }, ScreenComponent !== undefined ? /*#__PURE__*/React.createElement(ScreenComponent, {\n    navigation: navigation,\n    route: route\n  }) : screen.children !== undefined ? screen.children({\n    navigation,\n    route\n  }) : null)));\n}","map":{"version":3,"mappings":"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","names":["React","EnsureSingleNavigator","NavigationStateContext","StaticContainer","useOptionsGetters","SceneView","screen","route","navigation","routeState","getState","setState","options","clearOptions","navigatorKeyRef","useRef","getKey","useCallback","current","addOptionsGetter","key","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","Provider","value","name","render","children"],"sources":["/Users/harsh_ju/node_modules/@react-navigation/core/lib/module/SceneView.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}