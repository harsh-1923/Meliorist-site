{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook which lets child navigators add action listeners.\n */\n\nexport default function useChildListeners() {\n  const {\n    current: listeners\n  } = React.useRef({\n    action: [],\n    focus: []\n  });\n  const addListener = React.useCallback((type, listener) => {\n    // @ts-expect-error: listener should be correct type according to `type`\n    listeners[type].push(listener);\n    return () => {\n      // @ts-expect-error: listener should be correct type according to `type`\n      const index = listeners[type].indexOf(listener);\n      listeners[type].splice(index, 1);\n    };\n  }, [listeners]);\n  return {\n    listeners,\n    addListener\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAIA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,GAA6B;EAC1C,MAAM;IAAEC,OAAO,EAAEC;EAAX,IAAyBH,KAAK,CAACI,MAANJ,CAI7B;IACAK,MAAM,EAAE,EADR;IAEAC,KAAK,EAAE;EAFP,CAJ6BN,CAA/B;EASA,MAAMO,WAAW,GAAGP,KAAK,CAACQ,WAANR,CAClB,CAA8BS,IAA9B,EAAuCC,QAAvC,KAAoE;IAClE;IACAP,SAAS,CAACM,IAAD,CAATN,CAAgBQ,IAAhBR,CAAqBO,QAArBP;IAEA,OAAO,MAAM;MACX;MACA,MAAMS,KAAK,GAAGT,SAAS,CAACM,IAAD,CAATN,CAAgBU,OAAhBV,CAAwBO,QAAxBP,CAAd;MAEAA,SAAS,CAACM,IAAD,CAATN,CAAgBW,MAAhBX,CAAuBS,KAAvBT,EAA8B,CAA9BA;IAJF;EALgB,GAYlB,CAACA,SAAD,CAZkBH,CAApB;EAeA,OAAO;IACLG,SADK;IAELI;EAFK,CAAP;AAID","names":["React","useChildListeners","current","listeners","useRef","action","focus","addListener","useCallback","type","listener","push","index","indexOf","splice"],"sources":["/Users/harsh_ju/node_modules/@react-navigation/core/lib/module/useChildListeners.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { ListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add action listeners.\n */\nexport default function useChildListeners() {\n  const { current: listeners } = React.useRef<\n    {\n      [K in keyof ListenerMap]: ListenerMap[K][];\n    }\n  >({\n    action: [],\n    focus: [],\n  });\n\n  const addListener = React.useCallback(\n    <T extends keyof ListenerMap>(type: T, listener: ListenerMap[T]) => {\n      // @ts-expect-error: listener should be correct type according to `type`\n      listeners[type].push(listener);\n\n      return () => {\n        // @ts-expect-error: listener should be correct type according to `type`\n        const index = listeners[type].indexOf(listener);\n\n        listeners[type].splice(index, 1);\n      };\n    },\n    [listeners]\n  );\n\n  return {\n    listeners,\n    addListener,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}