{"ast":null,"code":"import { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport ServerContext from './ServerContext';\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items = []; // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n\n  const pending = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach(it => {\n      const cb = it.cb;\n\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index() {\n      var _window$history$state; // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n\n\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index) {\n      return items[index];\n    },\n\n    backIndex(_ref) {\n      let {\n        path\n      } = _ref;\n\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push(_ref2) {\n      let {\n        path,\n        state\n      } = _ref2;\n      interrupt();\n      const id = nanoid(); // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1; // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n\n    replace(_ref3) {\n      let {\n        path,\n        state\n      } = _ref3;\n\n      var _window$history$state2, _window$history$state3;\n\n      interrupt();\n      const id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n\n      if (!items.length || items.findIndex(item => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{\n          path,\n          state,\n          id\n        }];\n      } else {\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      }\n\n      window.history.replaceState({\n        id\n      }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n; // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n\n      return new Promise((resolve, reject) => {\n        const done = interrupted => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          } // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n\n\n          const {\n            title\n          } = window.document;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n\n        pending.push({\n          ref: done,\n          cb: done\n        }); // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n\n        const timer = setTimeout(() => {\n          const index = pending.findIndex(it => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          var _window$history$state4;\n\n          const id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          const currentIndex = items.findIndex(item => item.id === id); // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n\n          index = Math.max(currentIndex, 0);\n          const last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n\n  };\n  return history;\n};\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\n\n\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  } // Tab and drawer will have `history` property, but stack will have history in `routes`\n\n\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state; // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n/**\n * Run async function in series as it's called.\n */\n\n\nconst series = cb => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n        last === null || last === void 0 ? void 0 : last();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers = [];\nexport default function useLinking(ref, _ref4) {\n  let {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault\n  } = _ref4;\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  const [history] = React.useState(createMemoryHistory); // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  const server = React.useContext(ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      const location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n\n      catch() {\n        return thenable;\n      }\n\n    };\n    return thenable; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      var _previousIndexRef$cur;\n\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n      const previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path; // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n\n      const record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current); // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some(r => !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name)))) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(`An error occurred when trying to handle the link '${path}': ${e.message}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(() => {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        var _route$path;\n\n        const route = findFocusedRoute(state);\n        const path = (_route$path = route === null || route === void 0 ? void 0 : route.path) !== null && _route$path !== void 0 ? _route$path : getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n\n    const onStateChange = async () => {\n      var _route$path2;\n\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = (_route$path2 = route === null || route === void 0 ? void 0 : route.path) !== null && _route$path2 !== void 0 ? _route$path2 : getPathFromStateRef.current(state, configRef.current);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined; // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n\n      if (previousFocusedState && focusedState && // We should only handle push/pop if path changed from what was in last `popstate`\n      // Otherwise it's likely a change triggered by `popstate`\n      path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            } // Store the updated state as well as fix the path if incorrect\n\n\n            history.replace({\n              path,\n              state\n            });\n          } catch (e) {// The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({\n          path,\n          state\n        });\n      }\n    }; // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState\n  };\n}","map":{"version":3,"mappings":"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","names":["findFocusedRoute","getActionFromState","getActionFromStateDefault","getPathFromState","getPathFromStateDefault","getStateFromPath","getStateFromPathDefault","nanoid","React","ServerContext","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","_window$history$state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","_window$history$state3","replaceState","go","n","Math","min","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","_window$history$state4","currentIndex","max","last","pop","removeEventListener","addEventListener","listen","listener","findMatchingState","a","b","undefined","key","aHistoryLength","routes","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","unshift","linkingHandlers","useLinking","independent","enabled","config","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","indexOf","useState","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","getInitialState","useCallback","value","location","pathname","search","thenable","then","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","route","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","_ref$current","addListener"],"sources":["/Users/harsh_ju/node_modules/@react-navigation/native/lib/module/useLinking.tsx"],"sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\n\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{ path, state, id }];\n      } else {\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${e.message}`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path =\n          route?.path ?? getPathFromStateRef.current(state, configRef.current);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path =\n        route?.path ?? getPathFromStateRef.current(state, configRef.current);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}