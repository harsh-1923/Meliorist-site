{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nexport const StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n\n  pop() {\n    let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n\n};\nexport default function StackRouter(options) {\n  const router = { ...BaseRouter,\n    type: 'stack',\n\n    getInitialState(_ref) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref;\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [{\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n\n    getRehydratedState(partialState, _ref2) {\n      let {\n        routeNames,\n        routeParamList\n      } = _ref2;\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => ({ ...route,\n        key: route.key || `${route.name}-${nanoid()}`,\n        params: routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n          ...route.params\n        } : route.params\n      }));\n\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes\n      };\n    },\n\n    getStateForRouteNamesChange(state, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      } = _ref3;\n      const routes = state.routes.filter(route => routeNames.includes(route.name) && !routeKeyChanges.includes(route.name));\n\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return { ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return { ...state,\n        index,\n        routes: state.routes.slice(0, index + 1)\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const {\n        routeParamList\n      } = options;\n\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n            if (index === -1) {\n              return null;\n            }\n\n            const {\n              name,\n              key,\n              params\n            } = action.payload;\n\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n\n            return { ...state,\n              routes: state.routes.map((route, i) => i === index ? {\n                key: key !== undefined ? key : `${name}-${nanoid()}`,\n                name,\n                params: routeParamList[name] !== undefined ? { ...routeParamList[name],\n                  ...params\n                } : params\n              } : route)\n            };\n          }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            const route = id ? state.routes.find(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n              params: route.params\n            }))) : undefined;\n            let routes;\n\n            if (route) {\n              routes = state.routes.filter(r => r.key !== route.key);\n              routes.push({ ...route,\n                params: routeParamList[action.payload.name] !== undefined ? { ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              });\n            } else {\n              routes = [...state.routes, {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? { ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n            }\n\n            return { ...state,\n              index: routes.length - 1,\n              routes\n            };\n          }\n\n          return null;\n\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return { ...state,\n                index: routes.length - 1,\n                routes\n              };\n            }\n\n            return null;\n          }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            var _action$payload$path; // If the route already exists, navigate to that\n\n\n            let index = -1;\n            const getId = // `getId` and `key` can't be used together\n            action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n            const id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n\n            if (id) {\n              index = state.routes.findIndex(route => route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              })));\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (index === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              var _action$payload$key;\n\n              const routes = [...state.routes, {\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? { ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n              return { ...state,\n                routes,\n                index: routes.length - 1\n              };\n            }\n\n            const route = state.routes[index];\n            let params;\n\n            if (action.payload.merge) {\n              params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n                ...route.params,\n                ...action.payload.params\n              } : route.params;\n            } else {\n              params = routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n                ...action.payload.params\n              } : action.payload.params;\n            }\n\n            return { ...state,\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params || action.payload.path && action.payload.path !== route.path ? { ...route,\n                path: (_action$payload$path = action.payload.path) !== null && _action$payload$path !== void 0 ? _action$payload$path : route.path,\n                params\n              } : state.routes[index]]\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions\n  };\n  return router;\n}","map":{"version":3,"mappings":"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","names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","max","concat","path","merge","actionCreators"],"sources":["/Users/harsh_ju/node_modules/@react-navigation/routers/lib/module/StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route = id\n              ? state.routes.find(\n                  (route) =>\n                    route.name === action.payload.name &&\n                    id === getId?.({ params: route.params })\n                )\n              : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  path: action.payload.path,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge) {\n              params =\n                action.payload.params !== undefined ||\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params,\n                    }\n                  : route.params;\n            } else {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params ||\n                (action.payload.path && action.payload.path !== route.path)\n                  ? {\n                      ...route,\n                      path: action.payload.path ?? route.path,\n                      params,\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}