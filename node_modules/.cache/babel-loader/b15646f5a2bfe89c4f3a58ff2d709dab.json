{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from './TabRouter';\nexport const DrawerActions = { ...TabActions,\n\n  openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n\n  closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n\n  toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n\n};\nexport default function DrawerRouter(_ref) {\n  let {\n    defaultStatus = 'closed',\n    ...rest\n  } = _ref;\n  const router = TabRouter(rest);\n\n  const isDrawerInHistory = state => {\n    var _state$history;\n\n    return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(it => it.type === 'drawer'));\n  };\n\n  const addDrawerToHistory = state => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return { ...state,\n      history: [...state.history, {\n        type: 'drawer',\n        status: defaultStatus === 'open' ? 'closed' : 'open'\n      }]\n    };\n  };\n\n  const removeDrawerFromHistory = state => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return { ...state,\n      history: state.history.filter(it => it.type !== 'drawer')\n    };\n  };\n\n  const openDrawer = state => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = state => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return { ...router,\n    type: 'drawer',\n\n    getInitialState(_ref2) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref2;\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n      return { ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n\n    getRehydratedState(partialState, _ref3) {\n      let {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      } = _ref3;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return { ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n          {\n            const result = router.getStateForAction(state, action, options);\n\n            if (result != null && result.index !== state.index) {\n              return closeDrawer(result);\n            }\n\n            return result;\n          }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,mBAAvB;AAEA,OAAOC,SAAP,IAEEC,UAFF,QAMO,aANP;AAkEA,OAAO,MAAMC,aAAa,GAAG,EAC3B,GAAGD,UADwB;;EAE3BE,UAAU,GAAqB;IAC7B,OAAO;MAAEC,IAAI,EAAE;IAAR,CAAP;EAHyB;;EAK3BC,WAAW,GAAqB;IAC9B,OAAO;MAAED,IAAI,EAAE;IAAR,CAAP;EANyB;;EAQ3BE,YAAY,GAAqB;IAC/B,OAAO;MAAEF,IAAI,EAAE;IAAR,CAAP;EACD;;AAV0B,CAAtB;AAaP,eAAe,SAASG,YAAT,OAMb;EAAA,IANmC;IACnCC,aAAa,GAAG,QADmB;IAEnC,GAAGC;EAFgC,CAMnC;EACA,MAAMC,MAAM,GAAGV,SAAS,CAACS,IAAD,CAAxB;;EAKA,MAAME,iBAAiB,GACrBC,KADwB;IAAA;;IAAA,OAIrBC,OAAO,mBAACD,KAAK,CAACE,OAAP,mDAACC,eAAeC,IAAf,CAAqBC,EAAD,IAAQA,EAAE,CAACb,IAAHa,KAAY,QAAxC,CAAD,CAJc;EAA1B;;EAMA,MAAMC,kBAAkB,GACtBN,KADyB,IAEgB;IACzC,IAAID,iBAAiB,CAACC,KAAD,CAArB,EAA8B;MAC5B,OAAOA,KAAP;IACD;;IAED,OAAO,EACL,GAAGA,KADE;MAELE,OAAO,EAAE,CACP,GAAGF,KAAK,CAACE,OADF,EAEP;QACEV,IAAI,EAAE,QADR;QAEEe,MAAM,EAAEX,aAAa,KAAK,MAAlBA,GAA2B,QAA3BA,GAAsC;MAFhD,CAFO;IAFJ,CAAP;EAPF;;EAmBA,MAAMY,uBAAuB,GAC3BR,KAD8B,IAEW;IACzC,IAAI,CAACD,iBAAiB,CAACC,KAAD,CAAtB,EAA+B;MAC7B,OAAOA,KAAP;IACD;;IAED,OAAO,EACL,GAAGA,KADE;MAELE,OAAO,EAAEF,KAAK,CAACE,OAANF,CAAcS,MAAdT,CAAsBK,EAAD,IAAQA,EAAE,CAACb,IAAHa,KAAY,QAAzCL;IAFJ,CAAP;EAPF;;EAaA,MAAMT,UAAU,GACdS,KADiB,IAEwB;IACzC,IAAIJ,aAAa,KAAK,MAAtB,EAA8B;MAC5B,OAAOY,uBAAuB,CAACR,KAAD,CAA9B;IACD;;IAED,OAAOM,kBAAkB,CAACN,KAAD,CAAzB;EAPF;;EAUA,MAAMP,WAAW,GACfO,KADkB,IAEuB;IACzC,IAAIJ,aAAa,KAAK,MAAtB,EAA8B;MAC5B,OAAOU,kBAAkB,CAACN,KAAD,CAAzB;IACD;;IAED,OAAOQ,uBAAuB,CAACR,KAAD,CAA9B;EAPF;;EAUA,OAAO,EACL,GAAGF,MADE;IAGLN,IAAI,EAAE,QAHD;;IAKLkB,eAAe,QAAiD;MAAA,IAAhD;QAAEC,UAAF;QAAcC,cAAd;QAA8BC;MAA9B,CAAgD;MAC9D,MAAMb,KAAK,GAAGF,MAAM,CAACY,eAAPZ,CAAuB;QACnCa,UADmC;QAEnCC,cAFmC;QAGnCC;MAHmC,CAAvBf,CAAd;MAMA,OAAO,EACL,GAAGE,KADE;QAELc,OAAO,EAAElB,aAFJ;QAGLmB,KAAK,EAAE,KAHF;QAILvB,IAAI,EAAE,QAJD;QAKLwB,GAAG,EAAG,UAAS7B,MAAM,EAAG;MALnB,CAAP;IAZG;;IAqBL8B,kBAAkB,CAChBC,YADgB,SAGhB;MAAA,IADA;QAAEP,UAAF;QAAcC,cAAd;QAA8BC;MAA9B,CACA;;MACA,IAAIK,YAAY,CAACH,KAAbG,KAAuB,KAA3B,EAAkC;QAChC,OAAOA,YAAP;MACD;;MAED,IAAIlB,KAAK,GAAGF,MAAM,CAACmB,kBAAPnB,CAA0BoB,YAA1BpB,EAAwC;QAClDa,UADkD;QAElDC,cAFkD;QAGlDC;MAHkD,CAAxCf,CAAZ;;MAMA,IAAIC,iBAAiB,CAACmB,YAAD,CAArB,EAAqC;QACnC;QACAlB,KAAK,GAAGQ,uBAAuB,CAACR,KAAD,CAA/BA;QACAA,KAAK,GAAGM,kBAAkB,CAACN,KAAD,CAA1BA;MACD;;MAED,OAAO,EACL,GAAGA,KADE;QAELc,OAAO,EAAElB,aAFJ;QAGLJ,IAAI,EAAE,QAHD;QAILwB,GAAG,EAAG,UAAS7B,MAAM,EAAG;MAJnB,CAAP;IAzCG;;IAiDLgC,qBAAqB,CAACnB,KAAD,EAAQgB,GAAR,EAAa;MAChC,MAAMI,MAAM,GAAGtB,MAAM,CAACqB,qBAAPrB,CAA6BE,KAA7BF,EAAoCkB,GAApClB,CAAf;MAEA,OAAOL,WAAW,CAAC2B,MAAD,CAAlB;IApDG;;IAuDLC,iBAAiB,CAACrB,KAAD,EAAQsB,MAAR,EAAgBC,OAAhB,EAAyB;MACxC,QAAQD,MAAM,CAAC9B,IAAf;QACE,KAAK,aAAL;UACE,OAAOD,UAAU,CAACS,KAAD,CAAjB;;QAEF,KAAK,cAAL;UACE,OAAOP,WAAW,CAACO,KAAD,CAAlB;;QAEF,KAAK,eAAL;UACE,IAAID,iBAAiB,CAACC,KAAD,CAArB,EAA8B;YAC5B,OAAOQ,uBAAuB,CAACR,KAAD,CAA9B;UACD;;UAED,OAAOM,kBAAkB,CAACN,KAAD,CAAzB;;QAEF,KAAK,SAAL;QACA,KAAK,UAAL;UAAiB;YACf,MAAMoB,MAAM,GAAGtB,MAAM,CAACuB,iBAAPvB,CAAyBE,KAAzBF,EAAgCwB,MAAhCxB,EAAwCyB,OAAxCzB,CAAf;;YAEA,IAAIsB,MAAM,IAAI,IAAVA,IAAkBA,MAAM,CAACI,KAAPJ,KAAiBpB,KAAK,CAACwB,KAA7C,EAAoD;cAClD,OAAO/B,WAAW,CAAC2B,MAAD,CAAlB;YACD;;YAED,OAAOA,MAAP;UACD;;QAED,KAAK,SAAL;UACE,IAAIrB,iBAAiB,CAACC,KAAD,CAArB,EAA8B;YAC5B,OAAOQ,uBAAuB,CAACR,KAAD,CAA9B;UACD;;UAED,OAAOF,MAAM,CAACuB,iBAAPvB,CAAyBE,KAAzBF,EAAgCwB,MAAhCxB,EAAwCyB,OAAxCzB,CAAP;;QAEF;UACE,OAAOA,MAAM,CAACuB,iBAAPvB,CAAyBE,KAAzBF,EAAgCwB,MAAhCxB,EAAwCyB,OAAxCzB,CAAP;MAjCJ;IAxDG;;IA6FL2B,cAAc,EAAEnC;EA7FX,CAAP;AA+FD","names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","DrawerRouter","defaultStatus","rest","router","isDrawerInHistory","state","Boolean","history","_state$history","some","it","addDrawerToHistory","status","removeDrawerFromHistory","filter","getInitialState","routeNames","routeParamList","routeGetIdList","default","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","index","actionCreators"],"sources":["/Users/harsh_ju/node_modules/@react-navigation/routers/lib/module/DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\nexport type DrawerStatus = 'open' | 'closed';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: DrawerStatus;\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * Default status of the drawer.\n   */\n  default: DrawerStatus;\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: DrawerStatus }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nexport default function DrawerRouter({\n  defaultStatus = 'closed',\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  const isDrawerInHistory = (\n    state:\n      | DrawerNavigationState<ParamListBase>\n      | PartialState<DrawerNavigationState<ParamListBase>>\n  ) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\n  const addDrawerToHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: [\n        ...state.history,\n        {\n          type: 'drawer',\n          status: defaultStatus === 'open' ? 'closed' : 'open',\n        },\n      ],\n    };\n  };\n\n  const removeDrawerFromHistory = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (!isDrawerInHistory(state)) {\n      return state;\n    }\n\n    return {\n      ...state,\n      history: state.history.filter((it) => it.type !== 'drawer'),\n    };\n  };\n\n  const openDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return removeDrawerFromHistory(state);\n    }\n\n    return addDrawerToHistory(state);\n  };\n\n  const closeDrawer = (\n    state: DrawerNavigationState<ParamListBase>\n  ): DrawerNavigationState<ParamListBase> => {\n    if (defaultStatus === 'open') {\n      return addDrawerToHistory(state);\n    }\n\n    return removeDrawerFromHistory(state);\n  };\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      const state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      return {\n        ...state,\n        default: defaultStatus,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerInHistory(partialState)) {\n        // Re-sync the drawer entry in history to correct it if it was wrong\n        state = removeDrawerFromHistory(state);\n        state = addDrawerToHistory(state);\n      }\n\n      return {\n        ...state,\n        default: defaultStatus,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return addDrawerToHistory(state);\n\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          const result = router.getStateForAction(state, action, options);\n\n          if (result != null && result.index !== state.index) {\n            return closeDrawer(result as DrawerNavigationState<ParamListBase>);\n          }\n\n          return result;\n        }\n\n        case 'GO_BACK':\n          if (isDrawerInHistory(state)) {\n            return removeDrawerFromHistory(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}