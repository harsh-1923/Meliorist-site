{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\n\nexport default function useNavigationCache(_ref) {\n  let {\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  } = _ref;\n  const {\n    stackRef\n  } = React.useContext(NavigationBuilderContext); // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n\n  const cache = React.useMemo(() => ({\n    current: {}\n  }), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [getState, navigation, setOptions, router, emitter]);\n  const actions = { ...router.actionCreators,\n    ...CommonActions\n  };\n  cache.current = state.routes.reduce((acc, route) => {\n    const previous = cache.current[route.key];\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {\n        emit,\n        ...rest\n      } = navigation;\n\n      const dispatch = thunk => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({\n            source: route.key,\n            ...action\n          });\n        }\n      };\n\n      const withStack = callback => {\n        let isStackSet = false;\n\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce((acc, name) => {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return withStack(() => // @ts-expect-error: name is a valid key, but TypeScript is dumb\n          dispatch(actions[name](...args)));\n        };\n\n        return acc;\n      }, {});\n      acc[route.key] = { ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...emitter.create(route.key),\n        dispatch: thunk => withStack(() => dispatch(thunk)),\n        setOptions: options => setOptions(o => ({ ...o,\n          [route.key]: { ...o[route.key],\n            ...options\n          }\n        })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          } // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      };\n    }\n\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"mappings":"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","names":["CommonActions","React","NavigationBuilderContext","useNavigationCache","state","getState","navigation","setOptions","router","emitter","stackRef","useContext","cache","useMemo","current","actions","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","dispatch","thunk","action","source","withStack","callback","isStackSet","process","env","NODE_ENV","Error","stack","undefined","helpers","Object","keys","name","args","create","options","o","isFocused","index"],"sources":["/Users/harsh_ju/node_modules/@react-navigation/core/lib/module/useNavigationCache.tsx"],"sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap>\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}