{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationContext from './NavigationContext';\nimport { PrivateValueStore } from './types';\nimport UnhandledActionContext from './UnhandledActionContext'; // This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\n\nPrivateValueStore;\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\n\nexport default function useNavigationHelpers(_ref) {\n  let {\n    onAction,\n    getState,\n    emitter,\n    router\n  } = _ref;\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n  return React.useMemo(() => {\n    const dispatch = op => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction === null || onUnhandledAction === void 0 ? void 0 : onUnhandledAction(action);\n      }\n    };\n\n    const actions = { ...router.actionCreators,\n      ...CommonActions\n    };\n    const helpers = Object.keys(actions).reduce((acc, name) => {\n      // @ts-expect-error: name is a valid key, but TypeScript is dumb\n      acc[name] = function () {\n        return dispatch(actions[name](...arguments));\n      };\n\n      return acc;\n    }, {});\n    return { ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : () => true,\n      canGoBack: () => {\n        const state = getState();\n        return router.getStateForAction(state, CommonActions.goBack(), {\n          routeNames: state.routeNames,\n          routeParamList: {},\n          routeGetIdList: {}\n        }) !== null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;\n      },\n      getParent: () => parentNavigationHelpers,\n      getState\n    };\n  }, [emitter.emit, getState, onAction, onUnhandledAction, parentNavigationHelpers, router]);\n}","map":{"version":3,"mappings":"AAAA,SACEA,aADF,QAMO,2BANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAA4CC,iBAA5C,QAAqE,SAArE;AACA,OAAOC,sBAAP,MAAmC,0BAAnC,C,CAGA;AACA;;AACAD,iBAAiB;AASjB;AACA;AACA;AACA;;AACA,eAAe,SAASE,oBAAT,OAKoD;EAAA,IAAjE;IAAEC,QAAF;IAAYC,QAAZ;IAAsBC,OAAtB;IAA+BC;EAA/B,CAAiE;EACjE,MAAMC,iBAAiB,GAAGT,KAAK,CAACU,UAANV,CAAiBG,sBAAjBH,CAA1B;EACA,MAAMW,uBAAuB,GAAGX,KAAK,CAACU,UAANV,CAAiBC,iBAAjBD,CAAhC;EAEA,OAAOA,KAAK,CAACY,OAANZ,CAAc,MAAM;IACzB,MAAMa,QAAQ,GAAIC,EAAD,IAA6C;MAC5D,MAAMC,MAAM,GAAG,OAAOD,EAAP,KAAc,UAAd,GAA2BA,EAAE,CAACR,QAAQ,EAAT,CAA7B,GAA4CQ,EAA3D;MAEA,MAAME,OAAO,GAAGX,QAAQ,CAACU,MAAD,CAAxB;;MAEA,IAAI,CAACC,OAAL,EAAc;QACZP,iBAAiB,SAAjBA,qBAAiB,WAAjBA,6BAAiB,CAAGM,MAAH,CAAjBN;MACD;IAPH;;IAUA,MAAMQ,OAAO,GAAG,EACd,GAAGT,MAAM,CAACU,cADI;MAEd,GAAGnB;IAFW,CAAhB;IAKA,MAAMoB,OAAO,GAAGC,MAAM,CAACC,IAAPD,CAAYH,OAAZG,EAAqBE,MAArBF,CACd,CAACG,GAAD,EAAMC,IAAN,KAAe;MACb;MACAD,GAAG,CAACC,IAAD,CAAHD,GAAY;QAAA,OAAkBV,QAAQ,CAACI,OAAO,CAACO,IAAD,CAAPP,CAAc,YAAdA,CAAD,CAA1B;MAAA,CAAZM;;MACA,OAAOA,GAAP;IAJY,GAMd,EANcH,CAAhB;IASA,OAAO,EACL,GAAGT,uBADE;MAEL,GAAGQ,OAFE;MAGLN,QAHK;MAILY,IAAI,EAAElB,OAAO,CAACkB,IAJT;MAKLC,SAAS,EAAEf,uBAAuB,GAC9BA,uBAAuB,CAACe,SADM,GAE9B,MAAM,IAPL;MAQLC,SAAS,EAAE,MAAM;QACf,MAAMC,KAAK,GAAGtB,QAAQ,EAAtB;QAEA,OACEE,MAAM,CAACqB,iBAAPrB,CAAyBoB,KAAzBpB,EAAgCT,aAAa,CAAC+B,MAAd/B,EAAhCS,EAAkE;UAChEuB,UAAU,EAAEH,KAAK,CAACG,UAD8C;UAEhEC,cAAc,EAAE,EAFgD;UAGhEC,cAAc,EAAE;QAHgD,CAAlEzB,MAIO,IAJPA,KAKAG,uBALA,SAKAA,2BALA,WAKAA,GALA,MAKAA,0BAAuB,CAAEgB,SAAzBhB,EALAH,KAMA,KAPF;MAXG;MAqBL0B,SAAS,EAAE,MAAMvB,uBArBZ;MAsBLL;IAtBK,CAAP;EAzBK,GAmDJ,CACDC,OAAO,CAACkB,IADP,EAEDnB,QAFC,EAGDD,QAHC,EAIDI,iBAJC,EAKDE,uBALC,EAMDH,MANC,CAnDIR,CAAP;AA2DD","names":["CommonActions","React","NavigationContext","PrivateValueStore","UnhandledActionContext","useNavigationHelpers","onAction","getState","emitter","router","onUnhandledAction","useContext","parentNavigationHelpers","useMemo","dispatch","op","action","handled","actions","actionCreators","helpers","Object","keys","reduce","acc","name","emit","isFocused","canGoBack","state","getStateForAction","goBack","routeNames","routeParamList","routeGetIdList","getParent"],"sources":["/Users/harsh_ju/node_modules/@react-navigation/core/lib/module/useNavigationHelpers.tsx"],"sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport { NavigationHelpers, NavigationProp, PrivateValueStore } from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  emitter: NavigationEventEmitter<any>;\n  router: Router<State, Action>;\n};\n\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\nexport default function useNavigationHelpers<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  Action extends NavigationAction,\n  EventMap extends Record<string, any>\n>({ onAction, getState, emitter, router }: Options<State, Action>) {\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n\n  return React.useMemo(() => {\n    const dispatch = (op: Action | ((state: State) => Action)) => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction?.(action);\n      }\n    };\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n      (acc, name) => {\n        // @ts-expect-error: name is a valid key, but TypeScript is dumb\n        acc[name] = (...args: any) => dispatch(actions[name](...args));\n        return acc;\n      },\n      {}\n    );\n\n    return {\n      ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers\n        ? parentNavigationHelpers.isFocused\n        : () => true,\n      canGoBack: () => {\n        const state = getState();\n\n        return (\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\n            routeNames: state.routeNames,\n            routeParamList: {},\n            routeGetIdList: {},\n          }) !== null ||\n          parentNavigationHelpers?.canGoBack() ||\n          false\n        );\n      },\n      getParent: () => parentNavigationHelpers as any,\n      getState,\n    } as NavigationHelpers<ParamListBase, EventMap> &\n      (NavigationProp<ParamListBase, string, any, any, any> | undefined) &\n      ActionHelpers;\n  }, [\n    emitter.emit,\n    getState,\n    onAction,\n    onUnhandledAction,\n    parentNavigationHelpers,\n    router,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}